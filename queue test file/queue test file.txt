/******************************************************************************



*******************************************************************************/
//this is the start of the queue header file
#ifndef INC_SMC_QUEUE_STRUCT_H_
#define INC_SMC_QUEUE_STRUCT_H_

#include <stdio.h>
#include <stddef.h> // size_t
#include <stdint.h>
#include <stdbool.h>
#include <inttypes.h>

#define SMC_Q_BUFSIZE 10

// To make a queue that is easy to revise to hold any type
// this file defines the contents of all queues as Q_data
// and defines that type at only one point: here.
// If you want to pass messages other than this union, you
// do not need to change any code in smc_queue_struct.h or .c
// except at this point.
// I am showing off a feature by using a UNION, but replacing
// if with "typedef int32_t Q_data;" would be simpler and safer.

enum Twist {QUADKNOB_CW, QUADKNOB_CCW, QUADKNOB_STILL};
typedef union {
		int int_val;
		float float_val;
		enum Twist twist;
} Q_data;

typedef struct smc_queue_struct {
	// ATTRIBUTES
	size_t cap;
	size_t burden;
	size_t tail;
	size_t head;
	Q_data buffer[SMC_Q_BUFSIZE];

	// METHODS
	bool (*put)(struct smc_queue_struct *q, const Q_data *msg);
	bool (*peek)(const struct smc_queue_struct *q, Q_data *msg);
	bool (*get)(struct smc_queue_struct *q,  Q_data *msg);
} Smc_queue;

Smc_queue* smc_queue_init( Smc_queue* Q);
bool smc_queue_put(Smc_queue *q, const Q_data *msg);
bool smc_queue_peek(const Smc_queue *q, Q_data *msg);
bool smc_queue_get(Smc_queue *q, Q_data *msg);




#endif /* INC_SMC_QUEUE_STRUCT_H_ */
//this is the end of the queue header file


#include <stdio.h>
//this creates the initialization 

Smc_queue* smc_queue_init(Smc_queue* q){
	q->head = 0;
	q->tail= 0;
	q->cap = SMC_Q_BUFSIZE;
	q->burden = 0;
	q->put = &(smc_queue_put);
	q->get = &(smc_queue_get);
	//q->peek = &(smc_queue_peek);
	return q;
}

//puts the message in the queue

bool smc_queue_put(Smc_queue *q, const Q_data *msg)
{
    //have to initialize success
    bool success = false;
    //if there is no room in the queue then return flase
    if (q->burden>=(q->cap))
    {
        success = false;
    }
    else
    {
        
        //since we are adding elements need to add to burden
         
         //puts the message in the array
		 q->buffer[q->tail] = *msg;
		 
		 //if the tail is out of range of the array then i set the tail back to zero
		 if (q->tail == (q->cap)-1)
		 {
		     q->tail =0;
		 }
		 else
		 {
		     q->tail += 1;
		 }
		 //burden is the amount of elements in the array
		 //and i moved it from the top of the else statement if the file stops working
		 q-> burden += 1;
		 success = true;
    }
    return success;
}

//this is Dr.Carroll code
/*
bool smc_queue_put(Smc_queue *q, const Q_data *msg){
	bool success = false;
	// FIRST check if there is room in the queue
	if (q->burden >= q->cap) success = false;
	else {
		 q-> burden += 1;
		 q->buffer[q->tail] = *msg;
		 q->tail += 1;
		 success = true;
	}
	return success;
}
*/
//gets message out of the queue

bool smc_queue_get(Smc_queue *q, Q_data  *msg){
	bool success = false;
	// if there is no value in the queue then return false
	if (q->burden == 0)
	{
	    success= false;
    }
	else 
	{
	    *msg = q->buffer[q->head];
	    q-> burden -= 1;
		if(q->head >= (q->cap)-1)
		{
		    //the head is set to -1 because i add one right after if statement
		    //and it doesn't work 
		    q->head = -1;
		}
		// shift the head to the right
		q-> head += 1;
		
	
		success = true;
	}
	return success;
}

//this is Dr.Carrolls code

/*bool smc_queue_get(Smc_queue *q, Q_data  *msg){
	bool success = false;
	// FIRST check if there is data in the queue
	if (q->burden == 0) success= false;

	else {
	    // Get message from front
		*msg = q->buffer[0];
		// Shuffle others forward
		for (int n = 0; n < (q->tail - 1); n++){
		   q->buffer[n] = q->buffer[n+1];
		}
		// Bookkeeping
		q-> tail -= 1;
		q->burden -= 1;
		success = true;
	}
	return success;
}*/


int main()
{
    
    Smc_queue* q;  
    smc_queue_init(q);
    Q_data msg;
    Q_data getdata;
    bool error_warning_out_of_space;  
    /*
    //this tests to make sure that it returns an error if it is empty or if it is full
    //this tests to make sure that it returns false
    for(int i = 0; i<15;i++)
    {
        msg.int_val = i;
        error_warning_out_of_space=q->put(q, &msg);
        
        if(error_warning_out_of_space != true)
        {
            printf("error");
        }
        else
        {
            printf("%d",msg.int_val);            
        }
    }    

    for(int i = 0; i<15;i++)
    {
        msg.int_val = i;
        error_warning_out_of_space=q->get(q, &getdata);
        
        if(error_warning_out_of_space != true)
        {
            printf("error");
        }
        else
        {
            printf("%d",getdata.int_val);            
        }
    }
        msg.int_val = 22;
        error_warning_out_of_space=q->put(q, &msg);
        error_warning_out_of_space=q->get(q, &getdata);
        
        if(error_warning_out_of_space != true)
        {
            printf("error");
        }
        else
        {
            printf("%d",getdata.int_val);            
        }    

    
    //tests to make sure that the array is put into the queue correct
    //and to make sure that the get and put works correctly with simple uses    
    for(int i = 0; i<10;i++)
    {
        msg.int_val = i;
        
        error_warning_out_of_space=q->put(q, &msg);
        printf("%d",msg.int_val);
    }
    if (error_warning_out_of_space = true)
    {
        printf("\n");
        for(int i = 0; i<15;i++)
        {
            error_warning_out_of_space=q->get(q, &getdata);
            printf("%d",getdata.int_val);
        }
    }
    if (error_warning_out_of_space = false)
    {
        printf("error");
    }
    msg.int_val = 22;
    printf("the head is");
    printf("%lu",q->head);
    error_warning_out_of_space=q->put(q, &msg);
    error_warning_out_of_space=q->get(q, &getdata);
    printf("%d",getdata.int_val);
    */
    
    return 0;
}
